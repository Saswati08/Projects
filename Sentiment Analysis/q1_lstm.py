# -*- coding: utf-8 -*-
"""q1_lstm.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_WabhQsrakuki3NoRJ0DuarjLa5NIXDW
"""

from google.colab import drive
drive.mount('/content/drive/')

cd drive/My Drive/DL2/

ls

import torch   

#handling text data
from torchtext import data

tokenize = lambda x: x.split()
TEXT = data.Field(sequential=True, tokenize=tokenize, lower=True, include_lengths=True, batch_first=True, fix_length=200)
LABEL = data.LabelField()
# fields = [('label', LABEL), ('text',TEXT)]
fields = [(None, None), ('label', LABEL), ('text', TEXT)]
train_data=data.TabularDataset(path = 'training_data.csv',fields = fields, format = 'csv',skip_header = True)
valid_data = data.TabularDataset(path = 'validation_data.csv',fields = fields, format = 'csv',skip_header = True)
#print preprocessed text
print(vars(train_data.examples[0]))

SEED = 2019

#Torch
torch.manual_seed(SEED)

#Cuda algorithms
torch.backends.cudnn.deterministic = True

# import random
# valid_data, train_data = training_data.split(split_ratio=0.2, random_state = random.seed(SEED))

len(valid_data)

TEXT.build_vocab(train_data,min_freq= 3,vectors = "glove.840B.300d")  
LABEL.build_vocab(train_data)

#No. of unique tokens in text
print("Size of TEXT vocabulary:",len(TEXT.vocab))

#No. of unique tokens in label
print("Size of LABEL vocabulary:",len(LABEL.vocab))

#Commonly used words
print(LABEL.vocab.freqs.most_common(13))  

#Word dictionary
# print(TEXT.vocab.stoi)  
word_embeddings = TEXT.vocab.vectors 
vocab_size = len(TEXT.vocab)

print(LABEL.vocab.stoi)

device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')  

#set batch size
BATCH_SIZE = 32

#Load an iterator
train_iter, valid_iter = data.BucketIterator.splits(
    (train_data, valid_data), 
    batch_size = BATCH_SIZE,
    sort_key = lambda x: len(x.text),
    sort_within_batch=True,
    device = device)

import torch.nn as nn
import torch
import torch.nn as nn
from torch.autograd import Variable
from torch.nn import functional as F
class classifier(nn.Module):
    
    #define all the layers used in model
    def __init__(self, vocab_size, embedding_dim, hidden_dim, output_dim, n_layers, 
                 bidirectional, dropout):
        
        #Constructor
        super().__init__()          
        
        #embedding layer
        self.embedding = nn.Embedding(vocab_size, embedding_dim)
        self.embedding.weight = nn.Parameter(TEXT.vocab.vectors, requires_grad=False)
        #lstm layer
        self.lstm = nn.LSTM(embedding_dim, 
                           hidden_dim, 
                           num_layers=n_layers, 
                           bidirectional=bidirectional, 
                           dropout=dropout,
                           batch_first=True)
        
        #dense layer
        self.fc = nn.Linear(hidden_dim * 4, output_dim)
        
        #activation function
        self.act = nn.Tanh()
        self.dropout = nn.Dropout(p = 0.2)
        
    def forward(self, input, text_lengths):
        
      embedded = self.embedding(input)
      embedded_w = nn.utils.rnn.pack_padded_sequence(embedded, text_lengths,batch_first=True)
      # embededded = embedded.permute(1, 0, 2)
      # if batch_size is None:
      # h_0 = Variable(torch.zeros(4, 32, 64).cuda()) # 4 = num_layers*num_directions
      
      # h_0 =  Variable(torch.zeros(4, 32, 64).cuda())
      output, (h_n, cell) = self.lstm(embedded_w)
      # h_n.size() = (4, batch_size, hidden_size)
      
      h_n = h_n.permute(1, 0, 2) # h_n.size() = (batch_size, 4, hidden_size)
      h_n = h_n.contiguous().view(h_n.size()[0], h_n.size()[1]*h_n.size()[2])
      h_n = self.dropout(h_n)
      # h_n.size() = (batch_size, 4*hidden_size)
      logits = self.act(h_n) # logits.size() = (batch_size, output_size)

      return logits

def train(model, iterator, optimizer, criterion, eps):
    
    #initialize every epoch 
    epoch_loss = 0
    epoch_acc = 0
    model.cuda()
    #set the model in training phase
    model.train()  
    
    for batch in iterator:
        
        #resets the gradients after every batch
        optimizer.zero_grad()   
        
        #retrieve text and no. of words
        text, text_lengths = batch.text  
        # if (text.size()[0] is not 32):
        #   # print("Here")
        #   # One of the batch returned by BucketIterator has length different than 32.
        #   continue 
        target = batch.label
        target = torch.autograd.Variable(target).long()
        if torch.cuda.is_available():
          text = text.cuda()
          target = target.cuda()

        #convert to 1D tensor
        predictions = model(text, text_lengths).squeeze()  
        # predictions = model(text).squeeze()
        # print(predictions.size())
        #compute the loss
        loss = criterion(predictions, batch.label) 
        # print(loss.item())       
        # print(target.size())
        #compute the binary accuracy
        # print(predictions.size())
        acc = (torch.max(predictions, 1)[1].view(target.size()).data == target.data).float().sum()/len(batch)
        if eps == 398:
          print(torch.max(predictions, 1)[1].view(target.size()).data, target.data, "training")
        #backpropage the loss and compute the gradients
        # print(torch.max(predictions, 1)[1].view(target.size()).data, "Predict", target.data)
        # print(torch.min(predictions, 1)[1].view(target.size()).data, "Min")
        loss.backward()       
        
        #update the weights
        optimizer.step()      
        
        #loss and accuracy
        epoch_loss += loss.item()  
        epoch_acc += acc.item()    
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator)

def evaluate(model, iterator, criterion):
    
    #initialize every epoch
    epoch_loss = 0
    epoch_acc = 0

    #deactivating dropout layers
    model.eval()
    
    #deactivates autograd
    with torch.no_grad():
    
        for batch in iterator:
        
            #retrieve text and no. of words
            text, text_lengths = batch.text
            
            target = batch.label
            target = torch.autograd.Variable(target).long()
            if torch.cuda.is_available():
              text = text.cuda()
              target = target.cuda()
            
            #convert to 1d tensor
            predictions = model(text, text_lengths).squeeze()
            # predictions = model(text).squeeze()
            #compute loss and accuracy
            loss = criterion(predictions, batch.label)
            acc = (torch.max(predictions, 1)[1].view(target.size()).data == target.data).float().sum()/len(batch)
            # print(torch.max(predictions, 1)[1].view(target.size()).data, target.data, "val")
            #keep track of loss and accuracy
            epoch_loss += loss.item()
            epoch_acc += acc.item()
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator)

def evaluate_f(model, iterator, criterion):
    
    #initialize every epoch
    epoch_loss = 0
    epoch_acc = 0
    y_test = []
    pred_test = []
    #deactivating dropout layers
    model.eval()
    
    #deactivates autograd
    with torch.no_grad():
    
        for batch in iterator:
        
            #retrieve text and no. of words
            text, text_lengths = batch.text
            
            target = batch.label
            target = torch.autograd.Variable(target).long()
            if torch.cuda.is_available():
              text = text.cuda()
              target = target.cuda()
            
            #convert to 1d tensor
            predictions = model(text, text_lengths).squeeze()
            # predictions = model(text).squeeze()
            #compute loss and accuracy
            loss = criterion(predictions, batch.label)
            acc = (torch.max(predictions, 1)[1].view(target.size()).data == target.data).float().sum()/len(batch)
            # print(torch.max(predictions, 1)[1].view(target.size()).data, target.data, "val")
            #keep track of loss and accuracy
            y_test.append(target.data)
            pred_test.append(torch.max(predictions, 1)[1].view(target.size()).data)
            epoch_loss += loss.item()
            epoch_acc += acc.item()
        
    return epoch_loss / len(iterator), epoch_acc / len(iterator), y_test, pred_test

size_of_vocab = len(TEXT.vocab)
embedding_dim = 300
hidden_dim = 64
num_output_nodes = 13
num_layers = 4
bidirection = True
dropout = 0.2
# dropout = 0
#instantiate the model
model = classifier(size_of_vocab, embedding_dim, hidden_dim,num_output_nodes, num_layers, bidirectional = False, dropout = dropout)
# model = classifier(size_of_vocab, embedding_dim, hidden_dim,num_layers, num_output_nodes, bidirection)

import torch.optim as optim

#define optimizer and loss
# optimizer = torch.optim.SGD(model.parameters(), lr = 1e-4, momentum = 0.9, weight_decay = 0.005)
# optimizer = torch.optim.Adam(model.parameters(), lr=1e-5, weight_decay=1e-5)  
optimizer = optim.Adam(model.parameters())
criterion = F.cross_entropy

N_EPOCHS = 400
best_valid_loss = float('inf')
best_valid_acc = 0
val_losses = []
train_losses = []
val_accs = []
train_accs = []
for epoch in range(N_EPOCHS):
     
    #train the model
    print()
    train_loss, train_acc = train(model, train_iter, optimizer, criterion, epoch)
    
    #evaluate the model
    valid_loss, valid_acc = evaluate(model, valid_iter, criterion)
    train_losses.append(train_loss)
    val_losses.append(valid_loss)
    train_accs.append(train_acc)
    val_accs.append(valid_acc)
    #save the best model
    if valid_acc < best_valid_acc:
        best_valid_acc = valid_acc
        torch.save(model.state_dict(), 'lstm_best.pt')
        torch.save(model, 'lstm_best')
    
    print(f'\tTrain Loss: {train_loss:.3f} | Train Acc: {train_acc*100:.2f}%')
    print(f'\t Val. Loss: {valid_loss:.3f} |  Val. Acc: {valid_acc*100:.2f}%', epoch)

import matplotlib.pyplot as plt

epoch_list = []
for i in range(15):
  epoch_list.append(i + 1)
plt.plot(epoch_list, train_losses[:15])
# plt.plot(epoch_list, train_accs[:22])
# plt.plot(epoch_list, val_accs[:22])
plt.plot(epoch_list, val_losses[:15], '--r')
plt.legend(["train loss", "validation loss"])
# plt.legend(['train acc', 'valid acc'])
plt.xlabel("epochs")
# plt.savefig("model1.jpeg", dpi = 500, format = "jpeg")
plt.show()

# Commented out IPython magic to ensure Python compatibility.
model = torch.load('lstm_best')
import numpy as np
# evaluate the model
valid_loss, valid_acc, y_test, pred_test = evaluate_f(model, valid_iter, criterion)

print(f'Val. Loss: {valid_loss:.3f} |  Val. Acc: {valid_acc:.2f}%')

def return_labels(tensor_list):
  new_list = np.array(tensor_list)
  labels = []
  for i in range(new_list.shape[0]):
    labels.append(new_list[i].squeeze().tolist())
  final_labels = []
  for i in range(len(labels)):
    for j in range(len(labels[i])):
      final_labels.append(labels[i][j])
  return final_labels

y_test = return_labels(y_test)
pred_test = return_labels(pred_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, pred_test)

import seaborn as sns
# %matplotlib inline
sns.heatmap(cm, annot=True, cbar=True, cmap = 'YlGnBu', fmt = 'd')
plt.xlabel('True Label')
plt.ylabel('Predicted Label')
# plt.title('Confusion Matrix')
plt.savefig("cm_lstm_3.jpeg", dpi = 500, format = 'jpeg')

ls

